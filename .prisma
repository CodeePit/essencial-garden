datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ORDER_STATUS {
  awaiting_payment
  payment_confirmed
  packing
  shipped
  delivered
  cancelled
}

model Product {
  id              String   @id @default(uuid())
  name            String @db.VarChar(32)
  description     String @db.VarChar(255)
  free_shipping   Boolean
  images          String[]
  price           Decimal
  search          String @db.VarChar(255)
  pathname        String @db.VarChar(32)
  stars           Int?
  info            String @db.VarChar(255)
  sales           Int
  tags            String[]
  mililiters      String[]
  bestseller      Boolean
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  category_id     Int?
  sub_category_id Int?
  discount_id     Int?

  Reviews    Review[]
  OrderItems OrderItem[]
  CartItems  CartItem[]

  Category    Category?    @relation(fields: [category_id], references: [id])
  SubCategory SubCategory? @relation(fields: [sub_category_id], references: [id])
  Discount    Discount?    @relation(fields: [discount_id], references: [id])

  @@index([search], name: "product_search_idx", type: SpGist)
}

model Discount {
  id          Int     @id @default(autoincrement())
  value       Decimal
  code        String  @unique  @db.VarChar(8)
  description String? @db.VarChar(255)

  Products Product[]
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(32)

  Products      Product[]
  SubCategories SubCategory[]
}

model SubCategory {
  id          Int    @id @default(autoincrement())
  name        String @db.VarChar(32)
  category_id Int

  Products Product[]

  Category Category @relation(fields: [category_id], references: [id])
}

model Review {
  id              String   @id @default(uuid())
  stars           Int
  user_name       String @db.VarChar(32)
  review          String
  created_at      DateTime @default(now())
  maybe_offensive Boolean
  product_id      String   @db.Uuid
  user_id         String   @db.Uuid

  Product Product @relation(fields: [product_id], references: [id])
  User    User    @relation(fields: [user_id], references: [id])
}

model User {
  id             String  @id @default(uuid())
  name           String @db.VarChar(32)
  email          String
  search_history String[]

  Reviews  Review[]
  Adresses Address[]

  Cart Cart?
}

model CartItem {
  id         String @id @default(uuid())
  quantity   Int
  product_id String @db.Uuid
  cart_id    String @db.Uuid

  Product Product @relation(fields: [product_id], references: [id])
  Cart    Cart    @relation(fields: [cart_id], references: [id])
}

model Cart {
  id      String @id @default(uuid())
  user_id String @unique @db.Uuid

  CartItems CartItem[]

  user User @relation(fields: [user_id], references: [id])
}

model Order {
  id              String        @id @default(uuid())
  status          ORDER_STATUS
  previous_status ORDER_STATUS?
  total_price     Decimal
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  address_id      String        @db.Uuid

  OrderItems OrderItem[]

  Address Address @relation(fields: [address_id], references: [id])
}

model OrderItem {
  id          String  @id @default(uuid())
  quantity    Int
  total_price Decimal
  order_id    String  @db.Uuid
  product_id  String  @db.Uuid

  Order   Order   @relation(fields: [order_id], references: [id])
  Product Product @relation(fields: [product_id], references: [id])
}

model Address {
  id           String   @id @default(uuid())
  postal_code  String
  city         String @db.VarChar(128)
  country      String @db.VarChar(128)
  state        String @db.VarChar(128)
  street       String @db.VarChar(255)
  number       String @db.VarChar(32)
  complement   String? @db.VarChar(255)
  neighborhood String @db.VarChar(255)
  phones       String[]
  user_id      String?  @db.Uuid

  Order Order[]

  User User? @relation(fields: [user_id], references: [id])
}
